(defpoll current-network
  :interval "10s"
  :initial "{}"
  "bash ~/.config/eww/scripts/get-network-info current | jq '.'"
)

(defpoll available-networks
  :interval "10s"
  :initial "{}"
  "bash ~/.config/eww/scripts/get-network-info available | jq '.'"
)

(defvar network-panel-visible "false")

(defwidget current_network [?show_ssid]
  (box
    :orientation "horizontal"
    :space-evenly false
    :spacing 5
    :class "network-status"
    (label
      :text "${
      current-network.type == 'Ethernet' ? ' 󰈀 '
      : current-network.type == 'Wi-Fi' ?
      (current-network.signal >= 80 ? ' 󰤨 '
        : current-network.signal >= 60 ? ' 󰤥 '
        : current-network.signal >= 40 ? ' 󰤢 '
        : current-network.signal >= 20 ? ' 󰤟 '
        : current-network.signal >= 0 ? ' 󰤯 '
      : ' 󰤮 ')
      : '  '
      }"
      :tooltip "${show_ssid != 'true' ?
      current-network.type == "Unknown" ?
      "Disconnected"
      : current-network.ssid
      : ''
      } ${current-network.ip}"
    )
    (label
      :text "${current-network.type == 'Unknown' ? 'Disconnected' : current-network.ssid}"
      :visible "${show_ssid ?: false}"
    )
  )
)


(defwidget available-networks-panel[]
  (box
    :class "network-panel"
    :orientation "v"
    :spacing 5
    (for network in available-networks
      (eventbox
        :onclick "
        if [[ ${network.active} != 'yes' ]]; then
        eww open network-security-popup --arg ssid='${network.ssid}';
        fi
        "
        :class "network"
        (box
          :class "container"
          (label
            :halign "start"
            :text "${
            network.security == ''
            ? (network.signal >= 80 ? '󰤨 '
              : network.signal >= 60 ? '󰤥 '
              : network.signal >= 40 ? '󰤢 '
              : network.signal >= 20 ? '󰤟 '
              : network.signal >= 0 ? '󰤯 '
            : '󰤮')
            : (network.signal >= 80 ? '󰤪 '
              : network.signal >= 60 ? '󰤧 '
              : network.signal >= 40 ? '󰤤 '
              : network.signal >= 20 ? '󰤡 '
              : network.signal >= 0 ? '󰤬 '
            : '󰤮')
            } ${network.ssid}"
          )
          (label
            :halign "end"
            :class "connection-status-label"
            :text "${network.active == 'yes' ? 'Connected' : '' }"
          )
        )
      )
    )
  )
)


(defvar passphrase "")

(defwindow network-security-popup [ssid]
  :monitor 0
  :geometry (geometry
    :x "35%"
    :y "35%"
    :height "20%"
    :width "25%"
  )
  :focusable true
  (box
    :space-evenly true
    :orientation "v"
    :class "network-popup"
    :spacing 5
    (label
      :text "Connect to ${ssid}"
    )
    (input
      :password true
      :onaccept "nmcli device wifi connect ${ssid} password '{}'"
      :onchange "eww update passphrase='{}'"
    )
    (box
      :spacing 2
      (button
        :onclick "nmcli device wifi connect ${ssid} password '${passphrase}'; eww close network-security-popup"
        "Connect"
      )
      (button
        :onclick "eww close network-security-popup"
      "cancel")
    )
  )
)